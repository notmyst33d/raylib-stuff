//usr/bin/cc -x c -O2 -Wall -o .buildbin "$0" && ./.buildbin; exit
// vi: ft=c

// SPDX-License-Identifier: GPL-2.0-or-later
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#include <stdarg.h>

// Platform-specific stuff
#include <sys/stat.h>
#include <sys/wait.h>
#include <dirent.h>

// START: https://github.com/Mbed-TLS/mbedtls/blob/development/library/sha1.c
// SPDX-License-Identifier: Apache-2.0 OR GPL-2.0-or-later
//
// This is a minimized version of SHA1 code from mbedtls
// without all of the unneccesary code
//
#define MBEDTLS_BSWAP32 __builtin_bswap32
#define MBEDTLS_GET_UINT32_BE(data, offset) MBEDTLS_BSWAP32(mbedtls_get_unaligned_uint32((data) + (offset)))
#define MBEDTLS_PUT_UINT32_BE(n, data, offset) mbedtls_put_unaligned_uint32((data) + (offset), MBEDTLS_BSWAP32((uint32_t) (n)))

static inline uint32_t mbedtls_get_unaligned_uint32(const void *p)
{
    uint32_t r;
    memcpy(&r, p, sizeof(r));
    return r;
}

static inline void mbedtls_put_unaligned_uint32(void *p, uint32_t x)
{
    memcpy(p, &x, sizeof(x));
}

typedef struct mbedtls_sha1_context {
    uint32_t total[2];          /*!< The number of Bytes processed.  */
    uint32_t state[5];          /*!< The intermediate digest state.  */
    unsigned char buffer[64];   /*!< The data block being processed. */
}
mbedtls_sha1_context;

int mbedtls_sha1_starts(mbedtls_sha1_context *ctx)
{
    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
    ctx->state[1] = 0xEFCDAB89;
    ctx->state[2] = 0x98BADCFE;
    ctx->state[3] = 0x10325476;
    ctx->state[4] = 0xC3D2E1F0;

    return 0;
}

int mbedtls_internal_sha1_process(mbedtls_sha1_context *ctx,
                                  const unsigned char data[64])
{
    struct {
        uint32_t temp, W[16], A, B, C, D, E;
    } local;

    local.W[0] = MBEDTLS_GET_UINT32_BE(data,  0);
    local.W[1] = MBEDTLS_GET_UINT32_BE(data,  4);
    local.W[2] = MBEDTLS_GET_UINT32_BE(data,  8);
    local.W[3] = MBEDTLS_GET_UINT32_BE(data, 12);
    local.W[4] = MBEDTLS_GET_UINT32_BE(data, 16);
    local.W[5] = MBEDTLS_GET_UINT32_BE(data, 20);
    local.W[6] = MBEDTLS_GET_UINT32_BE(data, 24);
    local.W[7] = MBEDTLS_GET_UINT32_BE(data, 28);
    local.W[8] = MBEDTLS_GET_UINT32_BE(data, 32);
    local.W[9] = MBEDTLS_GET_UINT32_BE(data, 36);
    local.W[10] = MBEDTLS_GET_UINT32_BE(data, 40);
    local.W[11] = MBEDTLS_GET_UINT32_BE(data, 44);
    local.W[12] = MBEDTLS_GET_UINT32_BE(data, 48);
    local.W[13] = MBEDTLS_GET_UINT32_BE(data, 52);
    local.W[14] = MBEDTLS_GET_UINT32_BE(data, 56);
    local.W[15] = MBEDTLS_GET_UINT32_BE(data, 60);

#define S(x, n) (((x) << (n)) | (((x) & 0xFFFFFFFF) >> (32 - (n))))

#define R(t)                                                    \
    (                                                           \
        local.temp = local.W[((t) -  3) & 0x0F] ^             \
                     local.W[((t) -  8) & 0x0F] ^             \
                     local.W[((t) - 14) & 0x0F] ^             \
                     local.W[(t)        & 0x0F],              \
        (local.W[(t) & 0x0F] = S(local.temp, 1))               \
    )

#define P(a, b, c, d, e, x)                                          \
    do                                                          \
    {                                                           \
        (e) += S((a), 5) + F((b), (c), (d)) + K + (x);             \
        (b) = S((b), 30);                                        \
    } while (0)

    local.A = ctx->state[0];
    local.B = ctx->state[1];
    local.C = ctx->state[2];
    local.D = ctx->state[3];
    local.E = ctx->state[4];

#define F(x, y, z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P(local.A, local.B, local.C, local.D, local.E, local.W[0]);
    P(local.E, local.A, local.B, local.C, local.D, local.W[1]);
    P(local.D, local.E, local.A, local.B, local.C, local.W[2]);
    P(local.C, local.D, local.E, local.A, local.B, local.W[3]);
    P(local.B, local.C, local.D, local.E, local.A, local.W[4]);
    P(local.A, local.B, local.C, local.D, local.E, local.W[5]);
    P(local.E, local.A, local.B, local.C, local.D, local.W[6]);
    P(local.D, local.E, local.A, local.B, local.C, local.W[7]);
    P(local.C, local.D, local.E, local.A, local.B, local.W[8]);
    P(local.B, local.C, local.D, local.E, local.A, local.W[9]);
    P(local.A, local.B, local.C, local.D, local.E, local.W[10]);
    P(local.E, local.A, local.B, local.C, local.D, local.W[11]);
    P(local.D, local.E, local.A, local.B, local.C, local.W[12]);
    P(local.C, local.D, local.E, local.A, local.B, local.W[13]);
    P(local.B, local.C, local.D, local.E, local.A, local.W[14]);
    P(local.A, local.B, local.C, local.D, local.E, local.W[15]);
    P(local.E, local.A, local.B, local.C, local.D, R(16));
    P(local.D, local.E, local.A, local.B, local.C, R(17));
    P(local.C, local.D, local.E, local.A, local.B, R(18));
    P(local.B, local.C, local.D, local.E, local.A, R(19));

#undef K
#undef F

#define F(x, y, z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P(local.A, local.B, local.C, local.D, local.E, R(20));
    P(local.E, local.A, local.B, local.C, local.D, R(21));
    P(local.D, local.E, local.A, local.B, local.C, R(22));
    P(local.C, local.D, local.E, local.A, local.B, R(23));
    P(local.B, local.C, local.D, local.E, local.A, R(24));
    P(local.A, local.B, local.C, local.D, local.E, R(25));
    P(local.E, local.A, local.B, local.C, local.D, R(26));
    P(local.D, local.E, local.A, local.B, local.C, R(27));
    P(local.C, local.D, local.E, local.A, local.B, R(28));
    P(local.B, local.C, local.D, local.E, local.A, R(29));
    P(local.A, local.B, local.C, local.D, local.E, R(30));
    P(local.E, local.A, local.B, local.C, local.D, R(31));
    P(local.D, local.E, local.A, local.B, local.C, R(32));
    P(local.C, local.D, local.E, local.A, local.B, R(33));
    P(local.B, local.C, local.D, local.E, local.A, R(34));
    P(local.A, local.B, local.C, local.D, local.E, R(35));
    P(local.E, local.A, local.B, local.C, local.D, R(36));
    P(local.D, local.E, local.A, local.B, local.C, R(37));
    P(local.C, local.D, local.E, local.A, local.B, R(38));
    P(local.B, local.C, local.D, local.E, local.A, R(39));

#undef K
#undef F

#define F(x, y, z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P(local.A, local.B, local.C, local.D, local.E, R(40));
    P(local.E, local.A, local.B, local.C, local.D, R(41));
    P(local.D, local.E, local.A, local.B, local.C, R(42));
    P(local.C, local.D, local.E, local.A, local.B, R(43));
    P(local.B, local.C, local.D, local.E, local.A, R(44));
    P(local.A, local.B, local.C, local.D, local.E, R(45));
    P(local.E, local.A, local.B, local.C, local.D, R(46));
    P(local.D, local.E, local.A, local.B, local.C, R(47));
    P(local.C, local.D, local.E, local.A, local.B, R(48));
    P(local.B, local.C, local.D, local.E, local.A, R(49));
    P(local.A, local.B, local.C, local.D, local.E, R(50));
    P(local.E, local.A, local.B, local.C, local.D, R(51));
    P(local.D, local.E, local.A, local.B, local.C, R(52));
    P(local.C, local.D, local.E, local.A, local.B, R(53));
    P(local.B, local.C, local.D, local.E, local.A, R(54));
    P(local.A, local.B, local.C, local.D, local.E, R(55));
    P(local.E, local.A, local.B, local.C, local.D, R(56));
    P(local.D, local.E, local.A, local.B, local.C, R(57));
    P(local.C, local.D, local.E, local.A, local.B, R(58));
    P(local.B, local.C, local.D, local.E, local.A, R(59));

#undef K
#undef F

#define F(x, y, z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P(local.A, local.B, local.C, local.D, local.E, R(60));
    P(local.E, local.A, local.B, local.C, local.D, R(61));
    P(local.D, local.E, local.A, local.B, local.C, R(62));
    P(local.C, local.D, local.E, local.A, local.B, R(63));
    P(local.B, local.C, local.D, local.E, local.A, R(64));
    P(local.A, local.B, local.C, local.D, local.E, R(65));
    P(local.E, local.A, local.B, local.C, local.D, R(66));
    P(local.D, local.E, local.A, local.B, local.C, R(67));
    P(local.C, local.D, local.E, local.A, local.B, R(68));
    P(local.B, local.C, local.D, local.E, local.A, R(69));
    P(local.A, local.B, local.C, local.D, local.E, R(70));
    P(local.E, local.A, local.B, local.C, local.D, R(71));
    P(local.D, local.E, local.A, local.B, local.C, R(72));
    P(local.C, local.D, local.E, local.A, local.B, R(73));
    P(local.B, local.C, local.D, local.E, local.A, R(74));
    P(local.A, local.B, local.C, local.D, local.E, R(75));
    P(local.E, local.A, local.B, local.C, local.D, R(76));
    P(local.D, local.E, local.A, local.B, local.C, R(77));
    P(local.C, local.D, local.E, local.A, local.B, R(78));
    P(local.B, local.C, local.D, local.E, local.A, R(79));

#undef K
#undef F

    ctx->state[0] += local.A;
    ctx->state[1] += local.B;
    ctx->state[2] += local.C;
    ctx->state[3] += local.D;
    ctx->state[4] += local.E;

    return 0;
}

int mbedtls_sha1_update(mbedtls_sha1_context *ctx,
                        const unsigned char *input,
                        size_t ilen)
{
    int ret = -1;
    size_t fill;
    uint32_t left;

    if (ilen == 0) {
        return 0;
    }

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
    ctx->total[0] &= 0xFFFFFFFF;

    if (ctx->total[0] < (uint32_t) ilen) {
        ctx->total[1]++;
    }

    if (left && ilen >= fill) {
        memcpy((void *) (ctx->buffer + left), input, fill);

        if ((ret = mbedtls_internal_sha1_process(ctx, ctx->buffer)) != 0) {
            return ret;
        }

        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while (ilen >= 64) {
        if ((ret = mbedtls_internal_sha1_process(ctx, input)) != 0) {
            return ret;
        }

        input += 64;
        ilen  -= 64;
    }

    if (ilen > 0) {
        memcpy((void *) (ctx->buffer + left), input, ilen);
    }

    return 0;
}

int mbedtls_sha1_finish(mbedtls_sha1_context *ctx,
                        unsigned char output[20])
{
    int ret = -1;
    uint32_t used;
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;

    if (used <= 56) {
        /* Enough room for padding + length in current block */
        memset(ctx->buffer + used, 0, 56 - used);
    } else {
        /* We'll need an extra block */
        memset(ctx->buffer + used, 0, 64 - used);

        if ((ret = mbedtls_internal_sha1_process(ctx, ctx->buffer)) != 0) {
            goto exit;
        }

        memset(ctx->buffer, 0, 56);
    }

    /*
     * Add message length
     */
    high = (ctx->total[0] >> 29)
           | (ctx->total[1] <<  3);
    low  = (ctx->total[0] <<  3);

    MBEDTLS_PUT_UINT32_BE(high, ctx->buffer, 56);
    MBEDTLS_PUT_UINT32_BE(low,  ctx->buffer, 60);

    if ((ret = mbedtls_internal_sha1_process(ctx, ctx->buffer)) != 0) {
        goto exit;
    }

    /*
     * Output final state
     */
    MBEDTLS_PUT_UINT32_BE(ctx->state[0], output,  0);
    MBEDTLS_PUT_UINT32_BE(ctx->state[1], output,  4);
    MBEDTLS_PUT_UINT32_BE(ctx->state[2], output,  8);
    MBEDTLS_PUT_UINT32_BE(ctx->state[3], output, 12);
    MBEDTLS_PUT_UINT32_BE(ctx->state[4], output, 16);

    ret = 0;

exit:
    return ret;
}
// END: https://github.com/Mbed-TLS/mbedtls/blob/development/library/sha1.c

#define BLUE "\x1b[34m"
#define RED "\x1b[31m"
#define INFO(message, args...) printf("\x1b[1m[%s%s\x1b[0;1m]\x1b[0m "message"\n", BLUE, "INFO", ##args);
#define ERROR(message, args...) printf("\x1b[1m[%s%s\x1b[0;1m]\x1b[0m "message"\n", RED, "ERROR", ##args);

#define HASH_SIZE 20
char *sha1(char *data, long size) {
    unsigned char hash[HASH_SIZE] = { 0 };
    char *hash_string = malloc(HASH_SIZE * 2 + 1);
    mbedtls_sha1_context sha1_context = { 0 };
    long position = 0;

    mbedtls_sha1_starts(&sha1_context);
    mbedtls_sha1_update(&sha1_context, (unsigned char*)data, size);
    mbedtls_sha1_finish(&sha1_context, hash);
    for (int i = 0; i < HASH_SIZE; i++) {
        position += sprintf(hash_string + position, "%02x", hash[i] & 0xff);
    }
    hash_string[HASH_SIZE * 2] = 0;

    return hash_string;
}

long nullsize(char **data) {
    long i = 0;
    while (data[i] != 0) {
        i++;
    }
    return i;
}

char *cflags_to_str(char **cflags) {
    long cflags_size = nullsize(cflags);
    if (cflags_size == 0) {
        return 0;
    }

    long strings_length = 0;
    for (int i = 0; cflags[i] != 0; i++) {
        strings_length += strlen(cflags[i]);
    }

    char *out = malloc(strings_length + cflags_size);
    long position = 0;
    position += sprintf(out, "%s", cflags[0]);
    for (int i = 1; i < cflags_size; i++) {
        position += sprintf(out + position, " %s", cflags[i]);
    }
    out[strings_length + cflags_size - 1] = 0;

    return out;
}

char *get_compilation_hash(char *path) {
    char build_path[257];

    char *path_hash = sha1(path, strlen(path));
    sprintf(build_path, ".build/%s", path_hash);

    FILE *f = fopen(build_path, "r");
    if (f == 0) {
        free(path_hash);
        return 0;
    }
    char *data = malloc(HASH_SIZE * 2 + 1);
    fread(data, 40, 1, f);
    fclose(f);
    data[40] = 0;

    free(path_hash);
    return data;
}

char *hash_source_cflags(char *path, char **cflags) {
    mbedtls_sha1_context sha1_context = { 0 };
    unsigned char hash[HASH_SIZE] = { 0 };
    char *hash_string = malloc(HASH_SIZE * 2 + 1);
    long position = 0;

    FILE *f = fopen(path, "r");
    fseek(f, 0, SEEK_END);
    long size = ftell(f);
    fseek(f, 0, SEEK_SET);
    char *data = malloc(size);
    fread(data, size, 1, f);
    fclose(f);

    char *cflags_string = cflags_to_str(cflags);
    mbedtls_sha1_starts(&sha1_context);
    mbedtls_sha1_update(&sha1_context, (unsigned char*)data, size);
    mbedtls_sha1_update(&sha1_context, (unsigned char*)cflags_string, strlen(cflags_string));
    mbedtls_sha1_finish(&sha1_context, hash);
    for (int i = 0; i < sizeof(hash); i++) {
        position += sprintf(hash_string + position, "%02x", hash[i] & 0xff);
    }
    hash_string[HASH_SIZE * 2] = 0;

    free(data);
    free(cflags_string);
    return hash_string;
}

int needs_recompilation(char *path, char **cflags) {
    int ret = 1;

    char *previous_hash = get_compilation_hash(path);
    if (previous_hash == 0) {
        return ret;
    }

    char *new_hash = hash_source_cflags(path, cflags);
    if (strcmp(previous_hash, new_hash) == 0) {
        ret = 0;
    }

    free(previous_hash);
    free(new_hash);
    return ret;
}

void write_recompilation_hash(char *path, char **cflags) {
    char *path_hash = sha1(path, strlen(path));
    char build_path[257];

    sprintf(build_path, ".build/%s", path_hash);
    FILE *f = fopen(build_path, "w");
    char *new_hash = hash_source_cflags(path, cflags);
    fwrite(new_hash, 40, 1, f);
    fclose(f);

    free(path_hash);
    free(new_hash);
    return;
}

int cc(char *in, char *out, char **cflags, int force_recompilation) {
    int status;

    pid_t pid = fork();
    if (pid == 0 && (needs_recompilation(in, cflags) || force_recompilation)) {
        long cflags_size = nullsize(cflags);
        long argv_size = cflags_size + 6;
        char **argv = malloc(argv_size * sizeof(char*));
        argv[0] = "cc";
        memcpy(argv + 1, cflags, cflags_size * sizeof(char*));
        argv[cflags_size + 1] = in;
        argv[cflags_size + 2] = "-c";
        argv[cflags_size + 3] = "-o";
        argv[cflags_size + 4] = out;
        argv[argv_size - 1] = 0;
        //char *argv[] = { "cc", in, "-c", "-o", out, 0 };
        execvp("cc", argv);
        _exit(EXIT_FAILURE);
    } else if (pid == 0) {
        _exit(EXIT_FAILURE);
    }

    if (!needs_recompilation(in, cflags) && !force_recompilation) {
        INFO("cc %s (cached)", in);
        return 0;
    }

    waitpid(pid, &status, 0);
    if (status != 0) {
        ERROR("cc %s", in);
        return -1;
    }
    INFO("cc %s", in);
    write_recompilation_hash(in, cflags);

    return 0;
}

int ld(char *out, ...) {
    int status;
    va_list args;
    va_start(args, out);

    pid_t pid = fork();
    if (pid == 0) {
        long argv_size = 4;
        char **argv = malloc(argv_size * sizeof(char*));
        argv[0] = "cc";
        argv[1] = "-o";
        argv[2] = out;
        while (1) {
            char *arg = va_arg(args, char*);
            if (arg == 0) {
                break;
            }
            argv_size += 1;
            argv = realloc(argv, argv_size * sizeof(char*));
            argv[argv_size - 2] = arg;
        }
        argv[argv_size - 1] = 0;
        execvp("cc", argv);
        free(argv);
        _exit(EXIT_FAILURE);
    }

    waitpid(pid, &status, 0);
    if (status != 0) {
        ERROR("ld %s", out);
        return -1;
    }
    INFO("ld %s", out);

    return 0;
}

#define assert(expr) if(expr != 0) return -1

char *raylib_cflags[] = { "-g", "-Wall", "-DPLATFORM_DESKTOP", 0 };
char *main_cflags[] = { "-g", "-Wall", "-Iraylib/src", "-Iraygui/src", 0 };

int main(void) {
    mkdir(".build", S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);
    mkdir("bin", S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);

    assert(cc("raylib/src/rcore.c", ".build/rcore.o", raylib_cflags, 0));
    assert(cc("raylib/src/rshapes.c", ".build/rshapes.o", raylib_cflags, 0));
    assert(cc("raylib/src/rtext.c", ".build/rtext.o", raylib_cflags, 0));
    assert(cc("raylib/src/rtextures.c", ".build/rtextures.o", raylib_cflags, 0));
    assert(cc("raylib/src/utils.c", ".build/utils.o", raylib_cflags, 0));
    assert(cc("src/main.c", ".build/main.o", main_cflags, 1));

    assert(ld(
        "bin/main",
        "-lm",
        "-lglfw",
        ".build/rcore.o",
        ".build/rshapes.o",
        ".build/rtext.o",
        ".build/rtextures.o",
        ".build/utils.o",
        ".build/main.o", 0
    ));

    INFO("Done");
    return 0;
}
